{"version":3,"sources":["components/mainchar.js","components/container.js","App.js","serviceWorker.js","index.js"],"names":["MainChar","this","x","y","state","context","save","translate","beginPath","arc","Math","PI","fillStyle","fill","closePath","restore","Game","update","clearRect","screenWidth","screenHeight","console","log","mainchar","render","requestAnimationFrame","window","innerWidth","innerHeight","Mainchar","refs","canvas","getContext","addEventListener","ev","preventDefault","stopImmediatePropagation","clientX","touches","clientY","setState","passive","ref","width","height","style","backgroundColor","Component","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6bd860f8.chunk.js","sourcesContent":["\r\nclass MainChar {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n    \r\n    render(state) {\r\n        const context = state.context;\r\n        context.save();\r\n        context.translate(state.x, state.y);\r\n        context.beginPath();\r\n        context.arc(0, 0, 10, 0, 2 * Math.PI);\r\n        context.fillStyle = \"green\";\r\n        context.fill();\r\n        context.closePath();\r\n        context.restore();\r\n    }\r\n}\r\nexport default MainChar","import React, { Component } from 'react';\r\nimport Mainchar from './mainchar';\r\nclass Game extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            screenWidth: window.innerWidth,\r\n            screenHeight: window.innerHeight,\r\n            context: null,\r\n            x: 0,\r\n            y: 0,\r\n            mainchar: new Mainchar(),\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const context = this.refs.canvas.getContext('2d');\r\n        window.addEventListener('touchmove', ev => {\r\n            ev.preventDefault();\r\n            ev.stopImmediatePropagation();\r\n            var clientX = ev.touches[0].clientX;\r\n            var clientY = ev.touches[0].clientY;\r\n            this.setState({ x: clientX , y: clientY });\r\n        }, { passive: false });\r\n        window.addEventListener('touchstart', ev => {\r\n            ev.preventDefault();\r\n            ev.stopImmediatePropagation();\r\n        }, { passive: false });\r\n        window.addEventListener('touchforcechange', ev => {\r\n            ev.preventDefault();\r\n            ev.stopImmediatePropagation();\r\n        }, { passive: false });\r\n        this.setState({ context: context });\r\n        requestAnimationFrame(() => { this.update() });\r\n    }\r\n    update = () => {\r\n        if (this.state.context) {\r\n            this.state.context.clearRect(0, 0, this.state.screenWidth, this.state.screenHeight);\r\n            console.log(this.state.x + \" \" + this.state.y);\r\n            this.state.mainchar.render(this.state);\r\n\r\n        }\r\n        requestAnimationFrame(() => { this.update() });\r\n    }\r\n    render() {\r\n        return (\r\n            <div >\r\n                <canvas ref=\"canvas\"\r\n                    width={this.state.screenWidth}\r\n                    height={this.state.screenHeight}\r\n                    style={{backgroundColor: \"red\"}}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './components/container';\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}